#ifndef market_h
#define market_h


#include <autobahn/autobahn.hpp>
#include <boost/asio.hpp>	
#include <autobahn/wamp_websocketpp_websocket_transport.hpp>
#include <websocketpp/config/asio_no_tls_client.hpp>
#include <websocketpp/client.hpp>
#include <boost/version.hpp>
#include <list>
#include <map>
#include <thread>
#include <mutex>
#include <iostream>
#include <memory>
#include <tuple>
#include <mysql/mysql.h>
#include "offer.cpp"
#include "ask.cpp"
#include "bid.cpp"
#include "parameters.hpp"
using namespace std;



typedef websocketpp::client<websocketpp::config::asio_client> client;
//typedef autobahn::wamp_websocketpp_websocket_transport<websocketpp::config::asio_tls_client> websocket_transport;

class market
{
	public:
		map<string, float> balances;
		
		list<offer> mytrades;
		list<offer> offers;
 	
		MYSQL_RES *result;
		MYSQL_ROW row;
		MYSQL *sqlconnection, mysql;

		static market & instance();

		int market_connect();
		void setup();

	private:
		market(market const&);
        void operator=(market const&);
		market() {};
};

market &market::instance()
{
	static market inst;
	return inst;	
}

void market::setup()
{
	cout << "setting up" << endl;
	mysql_init(&(this->mysql));
	cout << "setting up" << endl;
	this->sqlconnection = mysql_real_connect(&(this->mysql),"localhost","trader","Immabigfatjuicypassword","trades",0,0,0);
	/*int state = mysql_query(this->sqlconnection, "select * from `trades` where date BETWEEN DATE_SUB(NOW(), INTERVAL 14 DAY)  AND NOW()");

	if (state !=0)
	{
		printf(mysql_error(sqlconnection));
	}
	result = mysql_store_result(sqlconnection);
	while ( ( row=mysql_fetch_row(result)) != NULL )
	{
		cout << row << endl;
	}	*/
}


void ticker_event(const autobahn::wamp_event& event)
{
    //ticker event(event.argument<std::string>(0));   
    cout << "ticker" << endl;
}


void add2(autobahn::wamp_invocation invocation)
{
    auto a = invocation->argument<uint64_t>(0);
    auto b = invocation->argument<uint64_t>(1);

    std::cerr << "Procedure com.examples.calculator.add2 invoked: " << a << ", " << b << std::endl;

    invocation->result(std::make_tuple(a + b));
}


void trade_event(autobahn::wamp_invocation invocation)
{


	string update = invocation->argument<std::string>(0);
	if(update.size() > 75)
	{
	    bid bidevent(update);  
	    market::instance().offers.push_front(bidevent);
	    market::instance().offers.pop_back();
	    cout << "bid " << bidevent.rate << endl;
	}
	else
	{
		ask askevent(update);
	    market::instance().offers.push_front(askevent);
	    market::instance().offers.pop_back();
	    cout << "ask " << askevent.rate << endl;
	}
}

void ask_event(const autobahn::wamp_event& event)
{

}

int market::market_connect()
{
	 std::cerr << "Boost: " << BOOST_VERSION << std::endl;
    try {
        //auto parameters = get_parameters(argc, argv);

       // std::cerr << "Connecting to realm: " << parameters->realm() << std::endl;

        boost::asio::io_service io;
        bool debug = true;

        client ws_clinet;
        ws_clinet.init_asio(&io);
        auto transport = std::make_shared < autobahn::wamp_websocketpp_websocket_transport<websocketpp::config::asio_client> >(
            ws_clinet, "wss://api.poloniex.com:443", debug);

        
        auto session = std::make_shared<autobahn::wamp_session>(io, debug);

        // Create a thread to run the telemetry loop
        transport->attach(std::static_pointer_cast<autobahn::wamp_transport_handler>(session));

        // Make sure the continuation futures we use do not run out of scope prematurely.
        // Since we are only using one thread here this can cause the io service to block
        // as a future generated by a continuation will block waiting for its promise to be
        // fulfilled when it goes out of scope. This would prevent the session from receiving
        // responses from the router.
        boost::future<void> connect_future;
        boost::future<void> start_future;
        boost::future<void> join_future;
        boost::future<void> provide_future;
        cout << "starting it all" << endl;
        connect_future = transport->connect().then([&](boost::future<void> connected) {
            try {
                connected.get();
            } catch (const std::exception& e) {
            	cout <<"Failed to connect" << endl;
                std::cerr << e.what() << std::endl;
                io.stop();
                return;
            }

            std::cerr << "transport connected" << std::endl;

            start_future = session->start().then([&](boost::future<void> started) {
                try {
                    started.get();
                } catch (const std::exception& e) {
                        	cout <<"Failed to start" << endl;
                    std::cerr << e.what() << std::endl;
                    io.stop();
                    return;
                }

                std::cerr << "session started" << std::endl;

                join_future = session->join("realm1").then([&](boost::future<uint64_t> joined) {
                    try {
                        std::cerr << "joined realm: " << joined.get() << std::endl;
                    } catch (const std::exception& e) {
                        	cout <<"Failed to rejoingister" << endl;
                        std::cerr << e.what() << std::endl;
                        io.stop();
                        return;
                    }

                    provide_future = session->provide("USDT_ETH", &trade_event).then(
                        [&](boost::future<autobahn::wamp_registration> registration) {
                        try {
                            std::cerr << "registered procedure:" << registration.get().id() << std::endl;
                        } catch (const std::exception& e) {
                        	cout <<"Failed to register" << endl;
                            std::cerr << e.what() << std::endl;
                            io.stop();
                            return;
                        }
                    });
                });
            });
        });

        std::cerr << "starting io service" << std::endl;

        io.run();

        std::cerr << "stopped io service" << std::endl;
    }
    catch (const std::exception& e) {
        std::cerr << "exception: " << e.what() << std::endl;
        return -1;
    }
    return 1;
}


#endif